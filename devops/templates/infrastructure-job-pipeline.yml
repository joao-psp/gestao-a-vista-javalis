parameters:
  resourcePrefix: ''
  environment: dev

jobs:
- job:
  displayName: Terraforming ${{parameters.environment}}
  variables:
    terraformDirectory: devops/terraform
    terraformVariables: '-var "location=eastus2" -var "resource_prefix=${{parameters.resourcePrefix}}" -var "environment_tag=${{parameters.environment}}"'
  steps:
  - bash: |
      if [ -z "$RESOURCE_PREFIX" ]; then
        echo "##vso[task.logissue type=error;]Missing template parameter \"resourcePrefix\""
        echo "##vso[task.complete result=Failed;]"
      fi
    displayName: Checking mandatory parameters
    env:
      RESOURCE_PREFIX: ${{parameters.resourcePrefix}}
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: Install terraform 0.12.9
    inputs:
      terraformVersion: 0.12.9
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform init'
    inputs:
      workingDirectory: $(terraformDirectory)
      backendServiceArm: 'dtidigitalgeneralstorage-connection'
      backendAzureRmResourceGroupName: generalstorage
      backendAzureRmStorageAccountName: dtidigitalgeneralstorage
      backendAzureRmContainerName: terraform
      backendAzureRmKey: 'gestaoavistadti/${{parameters.resourcePrefix}}.terraform.tfstate'
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform plan'
    inputs:
      command: plan
      workingDirectory: $(terraformDirectory)
      commandOptions: '$(terraformVariables)'
      environmentServiceNameAzureRM: 'terraformagent-connection'
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform apply'
    inputs:
      command: apply
      workingDirectory: $(terraformDirectory)
      commandOptions: '-auto-approve $(terraformVariables)'
      environmentServiceNameAzureRM: 'terraformagent-connection'
